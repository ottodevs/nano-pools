{
  "_format": "hh3-sol-build-info-1",
  "id": "7dc513f67692c6d134fe4f674f1596e8ab590e75",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "publicSourceNameMap": {
    "contracts/Create2Factory.sol": "contracts/Create2Factory.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "forge-std/=npm/forge-std@1.9.4/src/",
        "@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/"
      ]
    },
    "sources": {
      "contracts/Create2Factory.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * @title Create2Factory\n * @dev Factory contract for deterministic deployment using CREATE2\n * Ensures identical contract addresses across different chains\n */\ncontract Create2Factory {\n    event ContractDeployed(address indexed deployedAddress, bytes32 indexed salt);\n\n    /**\n     * @dev Deploys a contract using CREATE2\n     * @param bytecode The contract bytecode to deploy\n     * @param salt The salt for deterministic address generation\n     * @return deployedAddress The address of the deployed contract\n     */\n    function deploy(bytes memory bytecode, bytes32 salt) external returns (address deployedAddress) {\n        assembly {\n            deployedAddress := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        \n        require(deployedAddress != address(0), \"Create2Factory: deployment failed\");\n        \n        emit ContractDeployed(deployedAddress, salt);\n    }\n\n    /**\n     * @dev Computes the address of a contract deployed with CREATE2\n     * @param bytecode The contract bytecode\n     * @param salt The salt for deterministic address generation\n     * @return computedAddress The computed address\n     */\n    function computeAddress(bytes memory bytecode, bytes32 salt) external view returns (address computedAddress) {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                bytes1(0xff),\n                address(this),\n                salt,\n                keccak256(bytecode)\n            )\n        );\n        \n        computedAddress = address(uint160(uint256(hash)));\n    }\n\n    /**\n     * @dev Computes the address using bytecode hash\n     * @param bytecodeHash The hash of the contract bytecode\n     * @param salt The salt for deterministic address generation\n     * @return computedAddress The computed address\n     */\n    function computeAddressFromHash(bytes32 bytecodeHash, bytes32 salt) external view returns (address computedAddress) {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                bytes1(0xff),\n                address(this),\n                salt,\n                bytecodeHash\n            )\n        );\n        \n        computedAddress = address(uint160(uint256(hash)));\n    }\n}\n"
      }
    }
  }
}