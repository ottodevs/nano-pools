{
  "_format": "hh3-sol-build-info-1",
  "id": "dc1c54938061cef6c47ce89cd016725627e5132e",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "publicSourceNameMap": {
    "contracts/NanoPool.sol": "contracts/NanoPool.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "forge-std/=npm/forge-std@1.9.4/src/",
        "@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/"
      ]
    },
    "sources": {
      "contracts/NanoPool.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title NanoPool\n * @dev A contract for creating small-scale funding pools\n * with escrow functionality for crowdfunding projects.\n */\ncontract NanoPool is ReentrancyGuard, Ownable {\n    // Pool counter for generating unique IDs\n    uint256 private _poolIdCounter;\n\n    // Structure to store pool information\n    struct Pool {\n        address initiator;\n        address beneficiary;\n        string description;\n        uint256 goalAmount;\n        uint256 currentAmount;\n        uint256 deadlineTimestamp;\n        bool goalAchieved;\n        bool fundsDisbursed;\n        mapping(address => uint256) contributions;\n        address[] contributors;\n    }\n\n    // Mapping from pool ID to Pool struct\n    mapping(uint256 => Pool) public pools;\n\n    // Events\n    event PoolCreated(\n        uint256 indexed poolId,\n        address indexed initiator,\n        address indexed beneficiary,\n        string description,\n        uint256 goalAmount,\n        uint256 deadlineTimestamp\n    );\n\n    event ContributionMade(\n        uint256 indexed poolId,\n        address indexed contributor,\n        uint256 amount,\n        uint256 newTotal\n    );\n\n    event GoalAchieved(uint256 indexed poolId, uint256 totalAmount);\n\n    event FundsDisbursed(\n        uint256 indexed poolId,\n        address indexed beneficiary,\n        uint256 amount\n    );\n\n    event RefundClaimed(\n        uint256 indexed poolId,\n        address indexed contributor,\n        uint256 amount\n    );\n\n    /**\n     * @dev Constructor to initialize the contract\n     */\n    constructor() Ownable() {\n        _poolIdCounter = 1; // Start pool IDs at 1\n    }\n\n    /**\n     * @dev Creates a new funding pool\n     * @param _beneficiary The address that will receive the funds if the goal is met\n     * @param _description A description of the pool's purpose\n     * @param _goalAmount The funding goal in wei\n     * @param _deadlineTimestamp The timestamp when the pool will close\n     * @return poolId The ID of the newly created pool\n     */\n    function createPool(\n        address _beneficiary,\n        string calldata _description,\n        uint256 _goalAmount,\n        uint256 _deadlineTimestamp\n    ) external returns (uint256 poolId) {\n        // Input validation\n        require(\n            _beneficiary != address(0),\n            \"Beneficiary cannot be zero address\"\n        );\n        require(_goalAmount > 0, \"Goal amount must be greater than zero\");\n        require(\n            _deadlineTimestamp > block.timestamp,\n            \"Deadline must be in the future\"\n        );\n\n        // Generate a new pool ID\n        poolId = _poolIdCounter++;\n\n        // Initialize the pool\n        Pool storage newPool = pools[poolId];\n        newPool.initiator = msg.sender;\n        newPool.beneficiary = _beneficiary;\n        newPool.description = _description;\n        newPool.goalAmount = _goalAmount;\n        newPool.currentAmount = 0;\n        newPool.deadlineTimestamp = _deadlineTimestamp;\n        newPool.goalAchieved = false;\n        newPool.fundsDisbursed = false;\n        newPool.contributors = new address[](0);\n\n        emit PoolCreated(\n            poolId,\n            msg.sender,\n            _beneficiary,\n            _description,\n            _goalAmount,\n            _deadlineTimestamp\n        );\n\n        return poolId;\n    }\n\n    /**\n     * @dev Allows users to contribute to a pool\n     * @param _poolId The ID of the pool to contribute to\n     */\n    function contribute(uint256 _poolId) external payable nonReentrant {\n        Pool storage pool = pools[_poolId];\n\n        // Validate the pool\n        require(pool.initiator != address(0), \"Pool does not exist\");\n        require(\n            block.timestamp < pool.deadlineTimestamp,\n            \"Pool deadline has passed\"\n        );\n        require(!pool.goalAchieved, \"Pool goal already achieved\");\n        require(msg.value > 0, \"Contribution amount must be greater than zero\");\n\n        // Check if this is a new contributor\n        if (pool.contributions[msg.sender] == 0) {\n            pool.contributors.push(msg.sender);\n        }\n\n        // Update the contribution\n        pool.contributions[msg.sender] += msg.value;\n        pool.currentAmount += msg.value;\n\n        emit ContributionMade(\n            _poolId,\n            msg.sender,\n            msg.value,\n            pool.currentAmount\n        );\n\n        // Check if goal is achieved\n        if (pool.currentAmount >= pool.goalAmount && !pool.goalAchieved) {\n            pool.goalAchieved = true;\n            emit GoalAchieved(_poolId, pool.currentAmount);\n        }\n    }\n\n    /**\n     * @dev Disburses funds to the beneficiary if the goal is achieved\n     * @param _poolId The ID of the pool to disburse funds from\n     */\n    function disburseFunds(uint256 _poolId) external nonReentrant {\n        Pool storage pool = pools[_poolId];\n\n        // Validate the pool\n        require(pool.initiator != address(0), \"Pool does not exist\");\n        require(\n            msg.sender == pool.initiator || msg.sender == owner(),\n            \"Only pool initiator or contract owner can disburse funds\"\n        );\n        require(pool.goalAchieved, \"Pool goal not achieved\");\n        require(!pool.fundsDisbursed, \"Funds already disbursed\");\n        require(\n            block.timestamp >= pool.deadlineTimestamp,\n            \"Pool deadline not yet passed\"\n        );\n\n        // Mark as disbursed before transfer to prevent reentrancy\n        pool.fundsDisbursed = true;\n\n        // Transfer funds to beneficiary\n        (bool success, ) = pool.beneficiary.call{value: pool.currentAmount}(\"\");\n        require(success, \"Transfer to beneficiary failed\");\n\n        emit FundsDisbursed(_poolId, pool.beneficiary, pool.currentAmount);\n    }\n\n    /**\n     * @dev Allows contributors to claim refunds if the goal was not met and deadline has passed\n     * @param _poolId The ID of the pool to claim a refund from\n     */\n    function claimRefund(uint256 _poolId) external nonReentrant {\n        Pool storage pool = pools[_poolId];\n\n        // Validate the pool\n        require(pool.initiator != address(0), \"Pool does not exist\");\n        require(\n            block.timestamp >= pool.deadlineTimestamp,\n            \"Pool deadline not yet passed\"\n        );\n        require(\n            !pool.goalAchieved,\n            \"Pool goal was achieved, no refunds available\"\n        );\n\n        uint256 contributionAmount = pool.contributions[msg.sender];\n        require(contributionAmount > 0, \"No contribution found\");\n\n        // Reset contribution before transfer to prevent reentrancy\n        pool.contributions[msg.sender] = 0;\n\n        // Transfer refund to contributor\n        (bool success, ) = msg.sender.call{value: contributionAmount}(\"\");\n        require(success, \"Refund transfer failed\");\n\n        emit RefundClaimed(_poolId, msg.sender, contributionAmount);\n    }\n\n    /**\n     * @dev Returns pool details\n     * @param _poolId The ID of the pool\n     * @return initiator The address that created the pool\n     * @return beneficiary The address that will receive the funds\n     * @return description The pool description\n     * @return goalAmount The funding goal\n     * @return currentAmount The current amount raised\n     * @return deadlineTimestamp The deadline for contributions\n     * @return goalAchieved Whether the goal has been achieved\n     * @return fundsDisbursed Whether the funds have been disbursed\n     */\n    function getPoolDetails(\n        uint256 _poolId\n    )\n        external\n        view\n        returns (\n            address initiator,\n            address beneficiary,\n            string memory description,\n            uint256 goalAmount,\n            uint256 currentAmount,\n            uint256 deadlineTimestamp,\n            bool goalAchieved,\n            bool fundsDisbursed\n        )\n    {\n        Pool storage pool = pools[_poolId];\n        require(pool.initiator != address(0), \"Pool does not exist\");\n\n        return (\n            pool.initiator,\n            pool.beneficiary,\n            pool.description,\n            pool.goalAmount,\n            pool.currentAmount,\n            pool.deadlineTimestamp,\n            pool.goalAchieved,\n            pool.fundsDisbursed\n        );\n    }\n\n    /**\n     * @dev Returns the contribution of a specific address to a pool\n     * @param _poolId The ID of the pool\n     * @param _contributor The address of the contributor\n     * @return contribution The amount contributed\n     */\n    function getContribution(\n        uint256 _poolId,\n        address _contributor\n    ) external view returns (uint256 contribution) {\n        Pool storage pool = pools[_poolId];\n        require(pool.initiator != address(0), \"Pool does not exist\");\n\n        return pool.contributions[_contributor];\n    }\n\n    /**\n     * @dev Returns all contributors to a pool\n     * @param _poolId The ID of the pool\n     * @return List of contributor addresses\n     */\n    function getContributors(\n        uint256 _poolId\n    ) external view returns (address[] memory) {\n        Pool storage pool = pools[_poolId];\n        require(pool.initiator != address(0), \"Pool does not exist\");\n\n        return pool.contributors;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/security/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      }
    }
  }
}